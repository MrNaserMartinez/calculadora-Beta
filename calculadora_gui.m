function calculadora_gui()
    % Calculadora Multifuncional Unificada con Interfaz Gráfica Completa
    
    % Crear la figura principal con dimensiones ampliadas
    fig = uifigure('Name', 'Calculadora Multifuncional Unificada', ...
                   'Position', [50, 50, 1000, 700], ...
                   'Resize', 'off', ...
                   'Color', [0.94, 0.94, 0.94]);
    
    % Título principal
    titulo = uilabel(fig, 'Text', 'CALCULADORA MULTIFUNCIONAL UNIFICADA', ...
                     'Position', [50, 640, 900, 40], ...
                     'FontSize', 22, ...
                     'FontWeight', 'bold', ...
                     'HorizontalAlignment', 'center', ...
                     'BackgroundColor', [0.2, 0.4, 0.8], ...
                     'FontColor', 'white');
    
    % Panel para operaciones matemáticas
    panel_mat = uipanel(fig, 'Title', 'OPERACIONES MATEMÁTICAS', ...
                        'Position', [20, 480, 300, 150], ...
                        'FontSize', 11, ...
                        'FontWeight', 'bold', ...
                        'BackgroundColor', [0.95, 0.95, 1]);
    
    % Botones de operaciones matemáticas
    uibutton(panel_mat, 'Text', 'Aritméticas Básicas', ...
             'Position', [10, 100, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(1));
    
    uibutton(panel_mat, 'Text', 'Funciones de Raíces', ...
             'Position', [150, 100, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(2));
    
    uibutton(panel_mat, 'Text', 'Cálculo de Límites', ...
             'Position', [10, 70, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(3));
    
    uibutton(panel_mat, 'Text', 'Derivadas', ...
             'Position', [150, 70, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(4));
    
    uibutton(panel_mat, 'Text', 'Integrales Definidas', ...
             'Position', [10, 40, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(5));
    
    uibutton(panel_mat, 'Text', 'Func. Trigonométricas', ...
             'Position', [150, 40, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(6));
    
    uibutton(panel_mat, 'Text', 'Funciones de Potencia', ...
             'Position', [80, 10, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(7));
    
    % Panel para geometría
    panel_geo = uipanel(fig, 'Title', 'GEOMETRÍA', ...
                        'Position', [340, 550, 300, 80], ...
                        'FontSize', 11, ...
                        'FontWeight', 'bold', ...
                        'BackgroundColor', [0.95, 1, 0.95]);
    
    % Botones de geometría
    uibutton(panel_geo, 'Text', 'Cálculo de Volúmenes', ...
             'Position', [10, 35, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(8));
    
    uibutton(panel_geo, 'Text', 'Cálculo de Perímetros', ...
             'Position', [150, 35, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(9));
    
    uibutton(panel_geo, 'Text', 'Cálculo de Áreas', ...
             'Position', [80, 5, 130, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(10));
    
    % Panel para métodos numéricos
    panel_num = uipanel(fig, 'Title', 'MÉTODOS NUMÉRICOS', ...
                        'Position', [660, 380, 320, 250], ...
                        'FontSize', 11, ...
                        'FontWeight', 'bold', ...
                        'BackgroundColor', [1, 0.95, 0.95]);
    
    % Botones de métodos numéricos
    uibutton(panel_num, 'Text', 'Bisección', ...
             'Position', [10, 200, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(11));
    
    uibutton(panel_num, 'Text', 'Secante Modificada', ...
             'Position', [160, 200, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(12));
    
    uibutton(panel_num, 'Text', 'Raíces Múltiples', ...
             'Position', [10, 170, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(13));
    
    uibutton(panel_num, 'Text', 'Método de Muller', ...
             'Position', [160, 170, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(14));
    
    uibutton(panel_num, 'Text', 'Punto Fijo', ...
             'Position', [10, 140, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(15));
    
    uibutton(panel_num, 'Text', 'Gauss-Seidel', ...
             'Position', [160, 140, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(16));
    
    uibutton(panel_num, 'Text', 'Newton-Raphson', ...
             'Position', [10, 110, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(17));
    
    uibutton(panel_num, 'Text', 'Res. Inecuaciones', ...
             'Position', [160, 110, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(18));
    
    uibutton(panel_num, 'Text', 'Res. Ecuaciones', ...
             'Position', [10, 80, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(19));
    
    uibutton(panel_num, 'Text', 'Op. con Matrices', ...
             'Position', [160, 80, 140, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(20));
    
    % Panel para física
    panel_fis = uipanel(fig, 'Title', 'FÍSICA', ...
                        'Position', [20, 320, 620, 150], ...
                        'FontSize', 11, ...
                        'FontWeight', 'bold', ...
                        'BackgroundColor', [1, 1, 0.95]);
    
    % Botones de física
    uibutton(panel_fis, 'Text', 'MRUA', ...
             'Position', [20, 100, 110, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(21));
    
    uibutton(panel_fis, 'Text', 'Caída Libre', ...
             'Position', [140, 100, 110, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(22));
    
    uibutton(panel_fis, 'Text', 'Lanz. Proyectiles', ...
             'Position', [260, 100, 110, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(23));
    
    uibutton(panel_fis, 'Text', 'Segunda Ley Newton', ...
             'Position', [380, 100, 120, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(24));
    
    uibutton(panel_fis, 'Text', 'Tercera Ley Newton', ...
             'Position', [510, 100, 120, 25], ...
             'ButtonPushedFcn', @(~,~) ejecutar_funcion(25));
    
    % Área de texto para mensajes y resultados
    texto_estado = uitextarea(fig, 'Position', [20, 150, 960, 120], ...
                              'Value', {'=== BIENVENIDO A LA CALCULADORA MULTIFUNCIONAL UNIFICADA ===', ...
                                       '', ...
                                       'Esta calculadora incluye:', ...
                                       '• 7 Operaciones Matemáticas Básicas y Avanzadas', ...
                                       '• 3 Herramientas de Geometría', ...
                                       '• 10 Métodos Numéricos Avanzados', ...
                                       '• 5 Calculadoras de Física', ...
                                       '', ...
                                       'Seleccione cualquier opción para comenzar...'}, ...
                              'Editable', 'off', ...
                              'BackgroundColor', [0.98, 0.98, 0.98], ...
                              'FontSize', 10);
    
    % Panel de información adicional
    panel_info = uipanel(fig, 'Title', 'INFORMACIÓN', ...
                         'Position', [340, 480, 300, 70], ...
                         'FontSize', 10, ...
                         'FontWeight', 'bold', ...
                         'BackgroundColor', [0.98, 0.98, 0.9]);
    
    info_label = uilabel(panel_info, 'Text', ['Total: 25 Funciones Disponibles' newline ...
                                              'Desarrollado como Proyecto Educativo' newline ...
                                              'Versión: Unificada 2024'], ...
                         'Position', [10, 10, 280, 45], ...
                         'FontSize', 9, ...
                         'VerticalAlignment', 'center');
    
    % Botones de control
    uibutton(fig, 'Text', 'LIMPIAR PANTALLA', ...
             'Position', [300, 80, 120, 35], ...
             'BackgroundColor', [0.2, 0.7, 0.2], ...
             'FontColor', 'white', ...
             'FontSize', 10, ...
             'FontWeight', 'bold', ...
             'ButtonPushedFcn', @limpiar_pantalla);
    
    uibutton(fig, 'Text', 'AYUDA', ...
             'Position', [440, 80, 120, 35], ...
             'BackgroundColor', [0.8, 0.6, 0.2], ...
             'FontColor', 'white', ...
             'FontSize', 10, ...
             'FontWeight', 'bold', ...
             'ButtonPushedFcn', @mostrar_ayuda);
    
    uibutton(fig, 'Text', 'SALIR', ...
             'Position', [580, 80, 120, 35], ...
             'BackgroundColor', [0.8, 0.2, 0.2], ...
             'FontColor', 'white', ...
             'FontSize', 10, ...
             'FontWeight', 'bold', ...
             'ButtonPushedFcn', @salir_aplicacion);
    
    % Reloj en tiempo real
    reloj_label = uilabel(fig, 'Text', datestr(now, 'HH:MM:SS - dd/mm/yyyy'), ...
                          'Position', [750, 30, 200, 30], ...
                          'FontSize', 10, ...
                          'HorizontalAlignment', 'right', ...
                          'FontWeight', 'bold');
    
    % Timer para actualizar el reloj
    timer_reloj = timer('ExecutionMode', 'fixedRate', ...
                        'Period', 1, ...
                        'TimerFcn', @(~,~) actualizar_reloj());
    start(timer_reloj);
    
    % Función para actualizar el reloj
    function actualizar_reloj()
        if isvalid(reloj_label)
            reloj_label.Text = datestr(now, 'HH:MM:SS - dd/mm/yyyy');
        else
            stop(timer_reloj);
            delete(timer_reloj);
        end
    end
    
    % Función principal para ejecutar las diferentes opciones
    function ejecutar_funcion(opcion)
        % Mapeo de nombres para mejor identificación
        nombres_funciones = {
            'Operaciones Aritméticas Básicas', 'Funciones de Raíces', 'Cálculo de Límites', ...
            'Cálculo de Derivadas', 'Integrales Definidas', 'Funciones Trigonométricas', ...
            'Funciones de Potencia', 'Cálculo de Volúmenes', 'Cálculo de Perímetros', ...
            'Cálculo de Áreas', 'Método de Bisección', 'Método de Secante Modificada', ...
            'Método de Raíces Múltiples', 'Método de Muller', 'Método de Punto Fijo', ...
            'Método de Gauss-Seidel', 'Método de Newton-Raphson', 'Resolución de Inecuaciones', ...
            'Resolución de Ecuaciones', 'Operaciones con Matrices', 'MRUA', ...
            'Caída Libre y Tiro Vertical', 'Lanzamiento de Proyectiles', ...
            'Segunda Ley de Newton', 'Tercera Ley de Newton'
        };
        
        % Actualizar mensaje de estado
        texto_estado.Value = {['=== EJECUTANDO: ' nombres_funciones{opcion} ' ==='], ...
                             ['Función seleccionada: Opción ' num2str(opcion)], ...
                             'Por favor espere mientras se procesa...', ...
                             ['Hora de ejecución: ' datestr(now, 'HH:MM:SS')]};
        drawnow;
        
        try
            switch opcion
                case 1
                    ejecutar_modulo('', 'calcular_aritmetica');
                case 2
                    ejecutar_modulo('', 'calcular_raiz');
                case 3
                    calculo_limites_gui();
                    mensaje = 'Método de bisección completado';
                case 4
                    ejecutar_modulo('', 'calcular_derivada');
                case 5
                    ejecutar_modulo('', 'calcular_integral');
                case 6
                    ejecutar_modulo('FuncionesTrigonometricas', 'main');
                case 7
                    ejecutar_modulo('', 'FUNCIONES_DE_POTENCIA');
                case 8
                    ejecutar_modulo('', 'calcular_volumen');
                case 9
                    ejecutar_modulo('', 'calcular_perimetro');
                case 10
                    calculo_areas_gui();
                    mensaje = 'Calculo de areas'
                case 11
                    calcular_biseccion_gui();
                    mensaje = 'Método de bisección completado';
                case 12
                    secante_modi_gui();
                    mensaje = 'Método de secante modificada completado';
                case 13
                    raices_multiples_gui();
                    mensaje = 'Método de raices multiples completado'
                case 14
                    muller_gui();
                    mensaje = 'Método de muller completado'
                case 15
                    punto_fijo_gui();
                    mensaje = 'Método punto fijo Completado'
                case 16
                    gauss_seidel_gui();
                    mensaje = 'Metodo Gauss_seidel_gui'
                case 17
                    newton_rapshon_gui();
                    mensaje = 'Metodo de Newton Rapson'
                case 18
                    resolver_inecuacion_gui();
                    mensaje = 'Resolver inecuacion completado'
                case 19
                    solucionador_ecuaciones_gui();
                    mensaje = 'Solucionador de ecuaciones'
                case 20
                    calculadora_matrices_gui();
                    mensaje = 'Calculadora de matrices completado'
                case 21
                    ejecutar_modulo('', 'MOVIMIENTO_RECTILINEO_UNIFORMEMENTE_ACELERADO');
                case 22
                    ejecutar_modulo('', 'calcular_caida');
                case 23
                    ejecutar_modulo('', 'calcular_proyectil');
                case 24
                    ejecutar_modulo('', 'segunda_ley_newton');
                case 25
                    ejecutar_modulo('', 'tercera_ley_newton');
                otherwise
                    error('Opción no válida');
            end
            
            % Actualizar mensaje de éxito
            texto_estado.Value = {['✓ COMPLETADO: ' nombres_funciones{opcion}], ...
                                 '✓ Operación ejecutada exitosamente', ...
                                 ['✓ Finalizado a las: ' datestr(now, 'HH:MM:SS')], ...
                                 '', ...
                                 'Puede seleccionar otra función o revisar los resultados.'};
            
        catch e
            % Manejar errores con información detallada
            texto_estado.Value = {['✗ ERROR en: ' nombres_funciones{opcion}], ...
                                 ['✗ Mensaje de error: ' e.message], ...
                                 '✗ Posibles causas:', ...
                                 '  - El archivo .m no existe en el directorio', ...
                                 '  - Error de sintaxis en la función', ...
                                 '  - Dependencias faltantes', ...
                                 '', ...
                                 'Verifique que todos los archivos estén presentes.'};
        end
    end
    
    % Función para limpiar la pantalla
    function limpiar_pantalla(~, ~)
        texto_estado.Value = {'=== PANTALLA LIMPIADA ===', ...
                             '', ...
                             'Sistema listo para nueva operación...', ...
                             ['Hora: ' datestr(now, 'HH:MM:SS')]};
    end
    
    % Función para mostrar ayuda
    function mostrar_ayuda(~, ~)
        uialert(fig, ...
            ['CALCULADORA MULTIFUNCIONAL UNIFICADA' newline newline ...
             'INSTRUCCIONES DE USO:' newline ...
             '1. Seleccione la categoría deseada' newline ...
             '2. Haga clic en el botón correspondiente' newline ...
             '3. Siga las instrucciones en pantalla' newline newline ...
             'CATEGORÍAS DISPONIBLES:' newline ...
             '• Matemáticas: 7 funciones' newline ...
             '• Geometría: 3 funciones' newline ...
             '• Métodos Numéricos: 10 funciones' newline ...
             '• Física: 5 funciones' newline newline ...
             'Total: 25 herramientas integradas'], ...
            'Ayuda del Sistema', ...
            'Icon', 'info');
    end
    
    % Función para salir de la aplicación
    function salir_aplicacion(~, ~)
        seleccion = uiconfirm(fig, ...
            ['¿Está seguro que desea salir?' newline newline ...
             'Se cerrará la Calculadora Multifuncional Unificada'], ...
            'Confirmar Salida', ...
            'Options', {'Sí, Salir', 'Cancelar'}, ...
            'DefaultOption', 'Cancelar', ...
            'Icon', 'question');
        
        if strcmp(seleccion, 'Sí, Salir')
            % Detener el timer del reloj
            if exist('timer_reloj', 'var') && isvalid(timer_reloj)
                stop(timer_reloj);
                delete(timer_reloj);
            end
            
            uialert(fig, ...
                ['Gracias por usar la Calculadora Multifuncional Unificada' newline newline ...
                 'Proyecto educativo desarrollado para facilitar' newline ...
                 'cálculos matemáticos, numéricos y de física.'], ...
                'Despedida', ...
                'Icon', 'success');
            pause(2);
            close(fig);
        end
    end
end

% ========== FUNCIONES AUXILIARES ==========

function ejecutar_modulo(directorio, nombre_funcion)
    % Función auxiliar mejorada para ejecutar módulos y manejar errores
    try
        % Guardar la ruta actual
        ruta_actual = pwd;
        
        % Si hay un directorio específico, cambiar a él
        if ~isempty(directorio)
            if exist(directorio, 'dir')
                cd(directorio);
            else
                warning('El directorio "%s" no existe. Ejecutando desde directorio actual.', directorio);
            end
        end
        
        % Verificar si la función existe
        if exist(nombre_funcion, 'file') == 2 || exist([nombre_funcion '.m'], 'file') == 2
            % Para módulos con main.m, ejecutar el archivo
            if strcmp(nombre_funcion, 'main')
                run('main.m');
            else
                % Ejecutar la función del módulo
                feval(nombre_funcion);
            end
        else
            error('La función "%s" no se encuentra en la ruta actual o especificada.', nombre_funcion);
        end
        
        % Volver a la ruta original
        cd(ruta_actual);
        
    catch e
        % Manejar errores y volver a la ruta original
        cd(ruta_actual);
        % Re-lanzar el error para que sea manejado por la función principal
        rethrow(e);
    end
end