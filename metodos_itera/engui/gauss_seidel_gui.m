function gauss_seidel_gui()
    % Interfaz gráfica para el Método de Gauss-Seidel
    
    % Crear la figura principal
    fig = uifigure('Name', 'Método de Gauss-Seidel', ...
                   'Position', [60, 30, 1400, 900], ...
                   'Resize', 'off', ...
                   'Color', [0.94, 0.94, 0.94]);
    
    % Título principal
    titulo = uilabel(fig, 'Text', 'MÉTODO DE GAUSS-SEIDEL', ...
                     'Position', [50, 840, 1300, 40], ...
                     'FontSize', 26, ...
                     'FontWeight', 'bold', ...
                     'HorizontalAlignment', 'center', ...
                     'BackgroundColor', [0.1, 0.4, 0.6], ...
                     'FontColor', 'white');
    
    % Subtítulo descriptivo
    subtitulo = uilabel(fig, 'Text', 'Método iterativo para resolver sistemas de ecuaciones lineales Ax = b', ...
                        'Position', [50, 810, 1300, 25], ...
                        'FontSize', 13, ...
                        'HorizontalAlignment', 'center', ...
                        'FontColor', [0.3, 0.3, 0.3]);
    
    % Panel de entrada de matriz A
    panel_matriz_a = uipanel(fig, 'Title', 'MATRIZ A (Coeficientes)', ...
                             'Position', [30, 600, 400, 200], ...
                             'FontSize', 12, ...
                             'FontWeight', 'bold', ...
                             'BackgroundColor', [0.98, 0.98, 1]);
    
    uilabel(panel_matriz_a, 'Text', 'Ingrese matriz A (separar elementos con espacios, filas con ;):', ...
            'Position', [15, 150, 370, 20], ...
            'FontSize', 10, ...
            'FontWeight', 'bold');
    
    campo_matriz_a = uitextarea(panel_matriz_a, ...
                                'Position', [15, 80, 370, 65], ...
                                'Value', {'[4 -1 0; -1 4 -1; 0 -1 4]'}, ...
                                'FontSize', 10);
    
    uilabel(panel_matriz_a, 'Text', 'Ejemplo: [4 -1 0; -1 4 -1; 0 -1 4]', ...
            'Position', [15, 60, 370, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.5, 0.5, 0.5]);
    
    uilabel(panel_matriz_a, 'Text', 'Nota: La matriz debe ser cuadrada y diagonalmente dominante', ...
            'Position', [15, 45, 370, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.6, 0.4, 0.2]);
    
    % Botón para verificar matriz
    btn_verificar_matriz = uibutton(panel_matriz_a, 'Text', 'Verificar Matriz', ...
                                    'Position', [15, 15, 120, 25], ...
                                    'FontSize', 10, ...
                                    'BackgroundColor', [0.4, 0.6, 0.8], ...
                                    'FontColor', 'white', ...
                                    'ButtonPushedFcn', @verificar_matriz);
    
    texto_verificacion = uilabel(panel_matriz_a, 'Text', '', ...
                                 'Position', [145, 15, 240, 25], ...
                                 'FontSize', 9);
    
    % Panel de entrada de vector b
    panel_vector_b = uipanel(fig, 'Title', 'VECTOR b (Términos independientes)', ...
                             'Position', [450, 680, 300, 120], ...
                             'FontSize', 12, ...
                             'FontWeight', 'bold', ...
                             'BackgroundColor', [0.98, 1, 0.98]);
    
    uilabel(panel_vector_b, 'Text', 'Vector b (separar con espacios o ;):', ...
            'Position', [15, 70, 270, 20], ...
            'FontSize', 10, ...
            'FontWeight', 'bold');
    
    campo_vector_b = uieditfield(panel_vector_b, 'text', ...
                                 'Position', [15, 45, 270, 22], ...
                                 'Value', '[15; 10; 10]', ...
                                 'FontSize', 10);
    
    uilabel(panel_vector_b, 'Text', 'Ejemplo: [15; 10; 10] o [15 10 10]', ...
            'Position', [15, 25, 270, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.5, 0.5, 0.5]);
    
    % Panel de vector inicial
    panel_vector_x0 = uipanel(fig, 'Title', 'VECTOR INICIAL x₀', ...
                              'Position', [450, 600, 300, 70], ...
                              'FontSize', 12, ...
                              'FontWeight', 'bold', ...
                              'BackgroundColor', [1, 0.98, 0.98]);
    
    uilabel(panel_vector_x0, 'Text', 'Vector inicial x₀:', ...
            'Position', [15, 30, 120, 20], ...
            'FontSize', 10, ...
            'FontWeight', 'bold');
    
    campo_vector_x0 = uieditfield(panel_vector_x0, 'text', ...
                                  'Position', [140, 30, 145, 22], ...
                                  'Value', '[0; 0; 0]', ...
                                  'FontSize', 10);
    
    % Panel de parámetros
    panel_parametros = uipanel(fig, 'Title', 'PARÁMETROS DE CONVERGENCIA', ...
                               'Position', [770, 600, 280, 200], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [1, 1, 0.98]);
    
    uilabel(panel_parametros, 'Text', 'Tolerancia:', ...
            'Position', [15, 140, 80, 22], ...
            'FontWeight', 'bold');
    
    campo_tol = uieditfield(panel_parametros, 'numeric', ...
                            'Position', [100, 140, 150, 22], ...
                            'Value', 1e-6, ...
                            'ValueDisplayFormat', '%.1e');
    
    uilabel(panel_parametros, 'Text', 'Max. iteraciones:', ...
            'Position', [15, 110, 110, 22], ...
            'FontWeight', 'bold');
    
    campo_max_iter = uieditfield(panel_parametros, 'numeric', ...
                                 'Position', [130, 110, 120, 22], ...
                                 'Value', 100);
    
    % Información sobre convergencia
    uilabel(panel_parametros, 'Text', 'CRITERIOS DE CONVERGENCIA:', ...
            'Position', [15, 80, 250, 18], ...
            'FontSize', 10, ...
            'FontWeight', 'bold', ...
            'FontColor', [0.3, 0.3, 0.7]);
    
    uilabel(panel_parametros, 'Text', '• Matriz diagonalmente dominante', ...
            'Position', [15, 60, 250, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.4, 0.4, 0.4]);
    
    uilabel(panel_parametros, 'Text', '• Elementos diagonales ≠ 0', ...
            'Position', [15, 45, 250, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.4, 0.4, 0.4]);
    
    uilabel(panel_parametros, 'Text', '• Error < tolerancia', ...
            'Position', [15, 30, 250, 15], ...
            'FontSize', 9, ...
            'FontColor', [0.4, 0.4, 0.4]);
    
    % Panel de control
    panel_control = uipanel(fig, 'Title', 'CONTROLES', ...
                            'Position', [1070, 600, 300, 200], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.98, 0.98, 0.98]);
    
    % Botones de control
    btn_resolver = uibutton(panel_control, 'Text', 'RESOLVER SISTEMA', ...
                            'Position', [20, 140, 260, 35], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.2, 0.7, 0.2], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @resolver_sistema);
    
    btn_ejemplo_2x2 = uibutton(panel_control, 'Text', 'EJEMPLO 2×2', ...
                               'Position', [20, 95, 120, 30], ...
                               'FontSize', 10, ...
                               'BackgroundColor', [0.5, 0.5, 0.8], ...
                               'FontColor', 'white', ...
                               'ButtonPushedFcn', @cargar_ejemplo_2x2);
    
    btn_ejemplo_3x3 = uibutton(panel_control, 'Text', 'EJEMPLO 3×3', ...
                               'Position', [160, 95, 120, 30], ...
                               'FontSize', 10, ...
                               'BackgroundColor', [0.5, 0.5, 0.8], ...
                               'FontColor', 'white', ...
                               'ButtonPushedFcn', @cargar_ejemplo_3x3);
    
    btn_limpiar = uibutton(panel_control, 'Text', 'LIMPIAR TODO', ...
                           'Position', [20, 55, 120, 30], ...
                           'FontSize', 10, ...
                           'BackgroundColor', [0.7, 0.7, 0.7], ...
                           'FontColor', 'white', ...
                           'ButtonPushedFcn', @limpiar_resultados);
    
    btn_graficar = uibutton(panel_control, 'Text', 'GRAFICAR CONV.', ...
                            'Position', [160, 55, 120, 30], ...
                            'FontSize', 10, ...
                            'BackgroundColor', [0.8, 0.4, 0.2], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @graficar_convergencia);
    
    % Tabla de iteraciones
    panel_tabla = uipanel(fig, 'Title', 'TABLA DE ITERACIONES', ...
                          'Position', [30, 300, 850, 290], ...
                          'FontSize', 12, ...
                          'FontWeight', 'bold', ...
                          'BackgroundColor', [0.99, 0.99, 0.99]);
    
    tabla_iteraciones = uitable(panel_tabla, ...
                                'Position', [15, 15, 820, 245], ...
                                'ColumnName', {'Iter', 'x₁', 'x₂', 'x₃', 'x₄', 'x₅', 'Error'}, ...
                                'ColumnWidth', {50, 100, 100, 100, 100, 100, 100}, ...
                                'RowName', {}, ...
                                'Data', {});
    
    % Panel de gráfica
    panel_grafica = uipanel(fig, 'Title', 'GRÁFICA DE CONVERGENCIA', ...
                            'Position', [900, 300, 470, 290], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.99, 0.99, 0.99]);
    
    axes_grafica = uiaxes(panel_grafica, ...
                          'Position', [20, 20, 430, 240]);
    
    % Panel de resultados
    panel_resultados = uipanel(fig, 'Title', 'RESULTADOS Y ANÁLISIS', ...
                               'Position', [30, 30, 1340, 260], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [0.98, 0.98, 0.98]);
    
    texto_resultados = uitextarea(panel_resultados, ...
                                  'Position', [20, 20, 1300, 210], ...
                                  'Editable', 'off', ...
                                  'FontSize', 11, ...
                                  'Value', {'=== MÉTODO DE GAUSS-SEIDEL ===', ...
                                           '', ...
                                           'El Método de Gauss-Seidel es un método iterativo para resolver sistemas de', ...
                                           'ecuaciones lineales de la forma Ax = b.', ...
                                           '', ...
                                           'CARACTERÍSTICAS:', ...
                                           '• Método iterativo que mejora la aproximación en cada paso', ...
                                           '• Usa los valores más recientes de las variables calculadas', ...
                                           '• Converge si la matriz es diagonalmente dominante', ...
                                           '• Más eficiente que el método de Jacobi', ...
                                           '', ...
                                           'PROCEDIMIENTO:', ...
                                           '1. Ingrese la matriz A de coeficientes', ...
                                           '2. Ingrese el vector b de términos independientes', ...
                                           '3. Defina el vector inicial x₀ (puede ser ceros)', ...
                                           '4. Establezca tolerancia y máximo de iteraciones', ...
                                           '5. Presione "RESOLVER SISTEMA" para ejecutar', ...
                                           '', ...
                                           'Use los botones de ejemplo para cargar sistemas de prueba.'});
    
    % Variables para almacenar resultados
    matriz_A = [];
    vector_b = [];
    vector_x0 = [];
    solucion_final = [];
    datos_iteraciones = {};
    errores_convergencia = [];
    
    % Función para verificar matriz
    function verificar_matriz(~, ~)
        try
            A_str = campo_matriz_a.Value{1};
            A = eval(A_str);
            
            [n, m] = size(A);
            if n ~= m
                texto_verificacion.Text = '❌ No es cuadrada';
                texto_verificacion.FontColor = [0.8, 0.2, 0.2];
                return;
            end
            
            % Verificar elementos diagonales no nulos
            if any(diag(A) == 0)
                texto_verificacion.Text = '❌ Diag. con ceros';
                texto_verificacion.FontColor = [0.8, 0.2, 0.2];
                return;
            end
            
            % Verificar dominancia diagonal
            dominante = true;
            for i = 1:n
                suma_fila = sum(abs(A(i, :))) - abs(A(i, i));
                if abs(A(i, i)) <= suma_fila
                    dominante = false;
                    break;
                end
            end
            
            if dominante
                texto_verificacion.Text = '✓ Matriz válida';
                texto_verificacion.FontColor = [0.2, 0.7, 0.2];
            else
                texto_verificacion.Text = '⚠️ No dom. diagonal';
                texto_verificacion.FontColor = [0.8, 0.6, 0.2];
            end
            
        catch
            texto_verificacion.Text = '❌ Error sintaxis';
            texto_verificacion.FontColor = [0.8, 0.2, 0.2];
        end
    end
    
    % Función para cargar ejemplo 2x2
    function cargar_ejemplo_2x2(~, ~)
        campo_matriz_a.Value = {'[3 1; 1 2]'};
        campo_vector_b.Value = '[9; 8]';
        campo_vector_x0.Value = '[0; 0]';
        campo_tol.Value = 1e-6;
        campo_max_iter.Value = 50;
        verificar_matriz();
        
        texto_resultados.Value = {'=== EJEMPLO 2×2 CARGADO ===', ...
                                 '', ...
                                 'Sistema de ecuaciones:', ...
                                 '3x₁ + x₂ = 9', ...
                                 'x₁ + 2x₂ = 8', ...
                                 '', ...
                                 'Solución exacta: x₁ = 2, x₂ = 3', ...
                                 'Vector inicial: [0, 0]', ...
                                 'Matriz diagonalmente dominante: Sí', ...
                                 '', ...
                                 'Presione "RESOLVER SISTEMA" para ejecutar el método.'};
    end
    
    % Función para cargar ejemplo 3x3
    function cargar_ejemplo_3x3(~, ~)
        campo_matriz_a.Value = {'[4 -1 0; -1 4 -1; 0 -1 4]'};
        campo_vector_b.Value = '[15; 10; 10]';
        campo_vector_x0.Value = '[0; 0; 0]';
        campo_tol.Value = 1e-6;
        campo_max_iter.Value = 100;
        verificar_matriz();
        
        texto_resultados.Value = {'=== EJEMPLO 3×3 CARGADO ===', ...
                                 '', ...
                                 'Sistema de ecuaciones:', ...
                                 '4x₁ - x₂ = 15', ...
                                 '-x₁ + 4x₂ - x₃ = 10', ...
                                 '-x₂ + 4x₃ = 10', ...
                                 '', ...
                                 'Vector inicial: [0, 0, 0]', ...
                                 'Matriz diagonalmente dominante: Sí', ...
                                 'Convergencia esperada: Rápida', ...
                                 '', ...
                                 'Presione "RESOLVER SISTEMA" para ejecutar el método.'};
    end
    
    % Función principal para resolver el sistema
    function resolver_sistema(~, ~)
        try
            % Limpiar resultados anteriores
            tabla_iteraciones.Data = {};
            cla(axes_grafica);
            
            % Obtener datos de entrada
            A_str = campo_matriz_a.Value{1};
            b_str = campo_vector_b.Value;
            x0_str = campo_vector_x0.Value;
            tol = campo_tol.Value;
            max_iter = campo_max_iter.Value;
            
            % Evaluar matrices y vectores
            A = eval(A_str);
            b = eval(b_str);
            x0 = eval(x0_str);
            
            % Almacenar para otras funciones
            matriz_A = A;
            vector_b = b;
            vector_x0 = x0;
            
            % Verificaciones básicas
            [n, m] = size(A);
            if n ~= m
                error('La matriz A debe ser cuadrada.');
            end
            
            b = b(:); % Vector columna
            x0 = x0(:); % Vector columna
            
            if length(b) ~= n || length(x0) ~= n
                error('Los vectores b y x₀ deben tener la misma dimensión que A.');
            end
            
            % Verificar elementos diagonales
            if any(diag(A) == 0)
                error('La matriz tiene elementos diagonales nulos.');
            end
            
            % Inicialización del algoritmo
            x = x0;
            error_actual = Inf;
            iter = 0;
            datos_tabla = {};
            errores = [];
            
            texto_resultados.Value = {'=== EJECUTANDO MÉTODO DE GAUSS-SEIDEL ===', ...
                                     '', ...
                                     ['Dimensión del sistema: ' num2str(n) '×' num2str(n)], ...
                                     ['Tolerancia: ' sprintf('%.1e', tol)], ...
                                     ['Máximo de iteraciones: ' num2str(max_iter)], ...
                                     '', ...
                                     'Calculando iteraciones...'};
            drawnow;
            
            % Algoritmo de Gauss-Seidel
            while error_actual > tol && iter < max_iter
                x_old = x;
                
                % Actualizar cada componente
                for i = 1:n
                    suma1 = 0;
                    suma2 = 0;
                    
                    % Suma de elementos antes de la diagonal (usa x actualizado)
                    if i > 1
                        suma1 = A(i, 1:i-1) * x(1:i-1);
                    end
                    
                    % Suma de elementos después de la diagonal (usa x anterior)
                    if i < n
                        suma2 = A(i, i+1:end) * x_old(i+1:end);
                    end
                    
                    x(i) = (b(i) - suma1 - suma2) / A(i, i);
                end
                
                iter = iter + 1;
                error_actual = norm(x - x_old, Inf);
                errores(end+1) = error_actual;
                
                % Guardar datos para la tabla (limitar a 6 variables mostradas)
                fila_datos = {iter};
                for j = 1:min(n, 5)
                    fila_datos{end+1} = sprintf('%.6f', x(j));
                end
                % Rellenar columnas faltantes si n < 5
                while length(fila_datos) < 6
                    fila_datos{end+1} = '';
                end
                fila_datos{end+1} = sprintf('%.2e', error_actual);
                
                datos_tabla{end+1, 1} = fila_datos{1};
                for k = 2:length(fila_datos)
                    datos_tabla{end, k} = fila_datos{k};
                end
            end
            
            % Guardar resultados
            solucion_final = x;
            datos_iteraciones = datos_tabla;
            errores_convergencia = errores;
            
            % Actualizar tabla
            tabla_iteraciones.Data = datos_tabla;
            
            % Generar resultados finales
            if error_actual <= tol
                estado = '✓ CONVERGENCIA EXITOSA';
                mensaje_convergencia = 'El método convergió dentro de la tolerancia especificada.';
            else
                estado = '⚠️ MÁXIMO DE ITERACIONES ALCANZADO';
                mensaje_convergencia = 'Se alcanzó el máximo de iteraciones sin convergencia completa.';
            end
            
            % Verificar solución
            residuo = A * x - b;
            norma_residuo = norm(residuo);
            
            texto_final = {['=== ' estado ' ==='], ...
                          '', ...
                          mensaje_convergencia, ...
                          '', ...
                          '📊 RESULTADOS FINALES:', ...
                          ['• Iteraciones realizadas: ' num2str(iter)], ...
                          ['• Error final: ' sprintf('%.2e', error_actual)], ...
                          ['• Norma del residuo: ' sprintf('%.2e', norma_residuo)], ...
                          '', ...
                          '🎯 SOLUCIÓN ENCONTRADA:'};
            
            for i = 1:n
                texto_final{end+1} = ['• x₍' num2str(i) '₎ = ' sprintf('%.8f', x(i))];
            end
            
            texto_final{end+1} = '';
            texto_final{end+1} = '🔍 VERIFICACIÓN:';
            texto_final{end+1} = 'Ax - b = [';
            for i = 1:n
                if i < n
                    texto_final{end} = [texto_final{end} sprintf('%.2e; ', residuo(i))];
                else
                    texto_final{end} = [texto_final{end} sprintf('%.2e]', residuo(i))];
                end
            end
            
            if norma_residuo < tol * 10
                texto_final{end+1} = '✓ Solución verificada correctamente';
            else
                texto_final{end+1} = '⚠️ Residuo alto - revisar condicionamiento';
            end
            
            texto_resultados.Value = texto_final;
            
            % Graficar convergencia automáticamente
            graficar_convergencia();
            
        catch e
            texto_resultados.Value = {'=== ERROR EN EL CÁLCULO ===', ...
                                     '', ...
                                     ['❌ ' e.message], ...
                                     '', ...
                                     'POSIBLES CAUSAS Y SOLUCIONES:', ...
                                     '', ...
                                     '🔧 Errores comunes:', ...
                                     '• Sintaxis incorrecta en matrices/vectores', ...
                                     '  → Use formato MATLAB: [a b; c d] para matrices', ...
                                     '  → Use [a; b] o [a b] para vectores', ...
                                     '', ...
                                     '• Dimensiones incompatibles', ...
                                     '  → Matriz A debe ser n×n', ...
                                     '  → Vectores b y x₀ deben ser de tamaño n', ...
                                     '', ...
                                     '• Matriz no apropiada', ...
                                     '  → Elementos diagonales no pueden ser cero', ...
                                     '  → Se recomienda dominancia diagonal', ...
                                     '', ...
                                     '• Parámetros inválidos', ...
                                     '  → Tolerancia debe ser positiva', ...
                                     '  → Máximo de iteraciones debe ser entero positivo'};
        end
    end
    
    % Función para graficar convergencia
    function graficar_convergencia(~, ~)
        if isempty(errores_convergencia)
            text(axes_grafica, 0.5, 0.5, 'No hay datos para graficar', ...
                 'Units', 'normalized', ...
                 'HorizontalAlignment', 'center', ...
                 'FontSize', 12, 'Color', [0.5, 0.5, 0.5]);
            return;
        end
        
        try
            % Graficar evolución del error
            semilogy(axes_grafica, 1:length(errores_convergencia), errores_convergencia, ...
                     'b-o', 'LineWidth', 2, 'MarkerSize', 6);
            hold(axes_grafica, 'on');
            
            % Línea de tolerancia
            if ~isempty(campo_tol) && campo_tol.Value > 0
                yline(axes_grafica, campo_tol.Value, '--r', 'LineWidth', 2, ...
                      'Label', ['Tolerancia = ' sprintf('%.1e', campo_tol.Value)]);
            end
            
            grid(axes_grafica, 'on');
            title(axes_grafica, 'Convergencia del Método de Gauss-Seidel', 'FontSize', 12);
            xlabel(axes_grafica, 'Iteración');
            ylabel(axes_grafica, 'Error (escala log)');
            
            % Anotar punto final
            if length(errores_convergencia) > 1
                plot(axes_grafica, length(errores_convergencia), errores_convergencia(end), ...
                     'ro', 'MarkerSize', 10, 'LineWidth', 2);
                
                text(axes_grafica, length(errores_convergencia), errores_convergencia(end), ...
                     sprintf('  Final: %.2e', errores_convergencia(end)), ...
                     'FontSize', 9, 'Color', 'red');
            end
            
            legend(axes_grafica, {'Error por iteración', 'Meta de tolerancia', 'Punto final'}, ...
                   'Location', 'best');
            
            hold(axes_grafica, 'off');
            
        catch
            text(axes_grafica, 0.5, 0.5, 'Error al generar gráfica', ...
                 'Units', 'normalized', ...
                 'HorizontalAlignment', 'center', ...
                 'FontSize', 12, 'Color', 'red');
        end
    end
    
    % Función para limpiar resultados
    function limpiar_resultados(~, ~)
        tabla_iteraciones.Data = {};
        cla(axes_grafica);
        texto_verificacion.Text = '';
        texto_resultados.Value = {'=== RESULTADOS LIMPIADOS ===', ...
                                 '', ...
                                 'Sistema listo para nuevos cálculos.', ...
                                 '', ...
                                 'Ingrese la matriz A, vector b, vector inicial x₀,', ...
                                 'y parámetros, luego presione "RESOLVER SISTEMA".'};
        
        % Limpiar variables
        matriz_A = [];
        vector_b = [];
        vector_x0 = [];
        solucion_final = [];
        datos_iteraciones = {};
        errores_convergencia = [];
    end
    
    % Inicializar con ejemplo 3x3
    cargar_ejemplo_3x3();
end