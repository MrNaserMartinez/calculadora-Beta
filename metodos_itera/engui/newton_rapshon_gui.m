function newton_raphson_gui()
    % Interfaz gráfica para el Método de Newton-Raphson
    
    % Crear la figura principal
    fig = uifigure('Name', 'Método de Newton-Raphson', ...
                   'Position', [50, 20, 1450, 950], ...
                   'Resize', 'off', ...
                   'Color', [0.94, 0.94, 0.94]);
    
    % Título principal
    titulo = uilabel(fig, 'Text', 'MÉTODO DE NEWTON-RAPHSON', ...
                     'Position', [50, 890, 1350, 40], ...
                     'FontSize', 28, ...
                     'FontWeight', 'bold', ...
                     'HorizontalAlignment', 'center', ...
                     'BackgroundColor', [0.1, 0.3, 0.7], ...
                     'FontColor', 'white');
    
    % Subtítulo descriptivo
    subtitulo = uilabel(fig, 'Text', 'Método iterativo de convergencia cuadrática para encontrar raíces de funciones', ...
                        'Position', [50, 860, 1350, 25], ...
                        'FontSize', 14, ...
                        'HorizontalAlignment', 'center', ...
                        'FontColor', [0.3, 0.3, 0.3]);
    
    % Panel de entrada de función
    panel_funcion = uipanel(fig, 'Title', 'DEFINICIÓN DE FUNCIÓN', ...
                            'Position', [30, 720, 450, 130], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.98, 0.98, 1]);
    
    uilabel(panel_funcion, 'Text', 'Función f(x):', ...
            'Position', [15, 80, 90, 22], ...
            'FontWeight', 'bold');
    
    campo_funcion = uieditfield(panel_funcion, 'text', ...
                                'Position', [110, 80, 320, 22], ...
                                'Value', 'x^3 - 6*x^2 + 11*x - 6', ...
                                'Placeholder', 'Ej: x^3 - 6*x^2 + 11*x - 6');
    
    uilabel(panel_funcion, 'Text', 'Derivada f''(x):', ...
            'Position', [15, 50, 90, 22], ...
            'FontWeight', 'bold');
    
    campo_derivada = uieditfield(panel_funcion, 'text', ...
                                 'Position', [110, 50, 320, 22], ...
                                 'Value', '3*x^2 - 12*x + 11', ...
                                 'Placeholder', 'Ej: 3*x^2 - 12*x + 11');
    
    % Botón para calcular derivada automáticamente
    btn_calc_derivada = uibutton(panel_funcion, 'Text', 'Calcular f''(x)', ...
                                 'Position', [15, 15, 120, 25], ...
                                 'FontSize', 10, ...
                                 'BackgroundColor', [0.4, 0.6, 0.8], ...
                                 'FontColor', 'white', ...
                                 'ButtonPushedFcn', @calcular_derivada_auto);
    
    uilabel(panel_funcion, 'Text', 'Automático', ...
            'Position', [145, 15, 80, 25], ...
            'FontSize', 9, ...
            'FontColor', [0.5, 0.5, 0.5], ...
            'VerticalAlignment', 'center');
    
    % Panel de parámetros
    panel_parametros = uipanel(fig, 'Title', 'PARÁMETROS DE ITERACIÓN', ...
                               'Position', [500, 720, 350, 130], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [0.98, 1, 0.98]);
    
    uilabel(panel_parametros, 'Text', 'Valor inicial x₀:', ...
            'Position', [15, 80, 100, 22], ...
            'FontWeight', 'bold');
    
    campo_x0 = uieditfield(panel_parametros, 'numeric', ...
                           'Position', [120, 80, 100, 22], ...
                           'Value', 1);
    
    uilabel(panel_parametros, 'Text', 'Tolerancia:', ...
            'Position', [15, 50, 80, 22], ...
            'FontWeight', 'bold');
    
    campo_tol = uieditfield(panel_parametros, 'numeric', ...
                            'Position', [120, 50, 100, 22], ...
                            'Value', 1e-8, ...
                            'ValueDisplayFormat', '%.1e');
    
    uilabel(panel_parametros, 'Text', 'Max. iter:', ...
            'Position', [230, 80, 70, 22], ...
            'FontWeight', 'bold');
    
    campo_max_iter = uieditfield(panel_parametros, 'numeric', ...
                                 'Position', [230, 50, 100, 22], ...
                                 'Value', 100);
    
    % Información sobre convergencia
    uilabel(panel_parametros, 'Text', 'Convergencia cuadrática: x_{n+1} = x_n - f(x_n)/f''(x_n)', ...
            'Position', [15, 20, 320, 20], ...
            'FontSize', 9, ...
            'FontColor', [0.4, 0.4, 0.6]);
    
    % Panel de control
    panel_control = uipanel(fig, 'Title', 'CONTROLES', ...
                            'Position', [870, 720, 350, 130], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [1, 0.98, 0.98]);
    
    % Botones de control
    btn_calcular = uibutton(panel_control, 'Text', 'ENCONTRAR RAÍZ', ...
                            'Position', [20, 80, 150, 35], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.2, 0.7, 0.2], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @calcular_newton_raphson);
    
    btn_graficar = uibutton(panel_control, 'Text', 'GRAFICAR', ...
                            'Position', [180, 80, 150, 35], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.8, 0.4, 0.2], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @graficar_funcion);
    
    btn_ejemplo1 = uibutton(panel_control, 'Text', 'EJEMPLO 1', ...
                            'Position', [20, 40, 100, 30], ...
                            'FontSize', 10, ...
                            'BackgroundColor', [0.5, 0.5, 0.8], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @cargar_ejemplo1);
    
    btn_ejemplo2 = uibutton(panel_control, 'Text', 'EJEMPLO 2', ...
                            'Position', [130, 40, 100, 30], ...
                            'FontSize', 10, ...
                            'BackgroundColor', [0.5, 0.5, 0.8], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @cargar_ejemplo2);
    
    btn_limpiar = uibutton(panel_control, 'Text', 'LIMPIAR', ...
                           'Position', [240, 40, 90, 30], ...
                           'FontSize', 10, ...
                           'BackgroundColor', [0.7, 0.7, 0.7], ...
                           'FontColor', 'white', ...
                           'ButtonPushedFcn', @limpiar_resultados);
    
    % Panel adicional de información
    panel_info = uipanel(fig, 'Title', 'INFORMACIÓN DEL MÉTODO', ...
                         'Position', [1240, 720, 180, 130], ...
                         'FontSize', 11, ...
                         'FontWeight', 'bold', ...
                         'BackgroundColor', [0.98, 0.98, 0.9]);
    
    uilabel(panel_info, 'Text', {'Características:', '• Convergencia rápida', '• Requiere f''(x)', '• Sensible a x₀', '• Falla si f''(x)=0'}, ...
            'Position', [10, 10, 160, 90], ...
            'FontSize', 9, ...
            'VerticalAlignment', 'top');
    
    % Tabla de iteraciones
    panel_tabla = uipanel(fig, 'Title', 'HISTORIAL DE ITERACIONES', ...
                          'Position', [30, 400, 700, 310], ...
                          'FontSize', 12, ...
                          'FontWeight', 'bold', ...
                          'BackgroundColor', [0.99, 0.99, 0.99]);
    
    tabla_iteraciones = uitable(panel_tabla, ...
                                'Position', [15, 15, 670, 265], ...
                                'ColumnName', {'Iteración', 'x_n', 'f(x_n)', 'f''(x_n)', 'Error', 'x_{n+1}'}, ...
                                'ColumnWidth', {80, 110, 110, 110, 110, 110}, ...
                                'RowName', {}, ...
                                'Data', {});
    
    % Panel de gráfica
    panel_grafica = uipanel(fig, 'Title', 'GRÁFICA DE LA FUNCIÓN Y CONVERGENCIA', ...
                            'Position', [750, 400, 670, 310], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.99, 0.99, 0.99]);
    
    axes_grafica = uiaxes(panel_grafica, ...
                          'Position', [20, 20, 630, 260]);
    
    % Panel de resultados
    panel_resultados = uipanel(fig, 'Title', 'RESULTADOS Y ANÁLISIS DETALLADO', ...
                               'Position', [30, 30, 1390, 360], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [0.98, 0.98, 0.98]);
    
    texto_resultados = uitextarea(panel_resultados, ...
                                  'Position', [20, 20, 1350, 310], ...
                                  'Editable', 'off', ...
                                  'FontSize', 11, ...
                                  'Value', {'=== MÉTODO DE NEWTON-RAPHSON ===', ...
                                           '', ...
                                           'El Método de Newton-Raphson es un algoritmo iterativo para encontrar', ...
                                           'aproximaciones de raíces de funciones reales.', ...
                                           '', ...
                                           'FÓRMULA: x_{n+1} = x_n - f(x_n) / f''(x_n)', ...
                                           '', ...
                                           'CARACTERÍSTICAS:', ...
                                           '• Convergencia cuadrática (muy rápida cerca de la raíz)', ...
                                           '• Requiere el cálculo de la derivada f''(x)', ...
                                           '• Sensible al valor inicial x₀', ...
                                           '• Puede fallar si f''(x) = 0 o f''(x) ≈ 0', ...
                                           '', ...
                                           'VENTAJAS:', ...
                                           '• Convergencia muy rápida cuando funciona', ...
                                           '• Pocas iteraciones necesarias', ...
                                           '• Precisión alta', ...
                                           '', ...
                                           'DESVENTAJAS:', ...
                                           '• Requiere calcular la derivada', ...
                                           '• Puede no converger con mal x₀', ...
                                           '• Problemas cuando f''(x) ≈ 0', ...
                                           '', ...
                                           'PROCEDIMIENTO:', ...
                                           '1. Ingrese la función f(x) y su derivada f''(x)', ...
                                           '2. Elija un valor inicial x₀ cercano a la raíz', ...
                                           '3. Establezca tolerancia y máximo de iteraciones', ...
                                           '4. Presione "ENCONTRAR RAÍZ" para ejecutar', ...
                                           '', ...
                                           'Use los ejemplos para probar el método con funciones conocidas.'});
    
    % Variables para almacenar resultados
    funcion_actual = [];
    derivada_actual = [];
    raiz_encontrada = [];
    historia_iteraciones = {};
    datos_convergencia = [];
    
    % Función para calcular derivada automáticamente
    function calcular_derivada_auto(~, ~)
        try
            f_str = campo_funcion.Value;
            if isempty(f_str)
                return;
            end
            
            % Usar symbolic toolbox si está disponible
            syms x;
            f_sym = str2sym(f_str);
            df_sym = diff(f_sym, x);
            derivada_str = char(df_sym);
            
            campo_derivada.Value = derivada_str;
            
            % Actualizar resultados
            texto_resultados.Value = [{'=== DERIVADA CALCULADA AUTOMÁTICAMENTE ==='; ''}, ...
                                     {['f(x) = ' f_str]}; ...
                                     {['f''(x) = ' derivada_str]}; ...
                                     {''; 'Derivada calculada usando cálculo simbólico.'; ...
                                      'Verifique que sea correcta antes de continuar.'}];
            
        catch
            texto_resultados.Value = {'=== ERROR AL CALCULAR DERIVADA ===', ...
                                     '', ...
                                     'No se pudo calcular la derivada automáticamente.', ...
                                     'Posibles causas:', ...
                                     '• Symbolic Math Toolbox no disponible', ...
                                     '• Sintaxis incorrecta en la función', ...
                                     '• Función demasiado compleja', ...
                                     '', ...
                                     'Por favor ingrese la derivada manualmente.'};
        end
    end
    
    % Función para cargar ejemplo 1
    function cargar_ejemplo1(~, ~)
        campo_funcion.Value = 'x^3 - 6*x^2 + 11*x - 6';
        campo_derivada.Value = '3*x^2 - 12*x + 11';
        campo_x0.Value = 1;
        campo_tol.Value = 1e-8;
        campo_max_iter.Value = 50;
        
        texto_resultados.Value = {'=== EJEMPLO 1 CARGADO ===', ...
                                 '', ...
                                 'Función: f(x) = x³ - 6x² + 11x - 6', ...
                                 'Derivada: f''(x) = 3x² - 12x + 11', ...
                                 '', ...
                                 'Esta función se puede factorizar como:', ...
                                 'f(x) = (x - 1)(x - 2)(x - 3)', ...
                                 '', ...
                                 'Por lo tanto tiene raíces en x = 1, x = 2, y x = 3', ...
                                 'Con x₀ = 1, el método debería converger rápidamente.', ...
                                 '', ...
                                 'Presione "ENCONTRAR RAÍZ" para ejecutar el método.'};
    end
    
    % Función para cargar ejemplo 2
    function cargar_ejemplo2(~, ~)
        campo_funcion.Value = 'cos(x) - x';
        campo_derivada.Value = '-sin(x) - 1';
        campo_x0.Value = 0.5;
        campo_tol.Value = 1e-10;
        campo_max_iter.Value = 20;
        
        texto_resultados.Value = {'=== EJEMPLO 2 CARGADO ===', ...
                                 '', ...
                                 'Función: f(x) = cos(x) - x', ...
                                 'Derivada: f''(x) = -sin(x) - 1', ...
                                 '', ...
                                 'Esta ecuación representa la intersección de:', ...
                                 '• y = cos(x)', ...
                                 '• y = x', ...
                                 '', ...
                                 'La raíz está aproximadamente en x ≈ 0.739085', ...
                                 'Con x₀ = 0.5, el método converge muy rápidamente.', ...
                                 '', ...
                                 'Presione "ENCONTRAR RAÍZ" para ejecutar el método.'};
    end
    
    % Función principal del método de Newton-Raphson
    function calcular_newton_raphson(~, ~)
        try
            % Limpiar resultados anteriores
            tabla_iteraciones.Data = {};
            cla(axes_grafica);
            
            % Obtener parámetros
            f_str = campo_funcion.Value;
            df_str = campo_derivada.Value;
            x0 = campo_x0.Value;
            tol = campo_tol.Value;
            max_iter = campo_max_iter.Value;
            
            % Validar entrada
            if isempty(f_str) || isempty(df_str)
                error('Debe ingresar tanto la función como su derivada.');
            end
            
            if tol <= 0
                error('La tolerancia debe ser un número positivo.');
            end
            
            if max_iter <= 0 || floor(max_iter) ~= max_iter
                error('El número máximo de iteraciones debe ser un entero positivo.');
            end
            
            % Crear funciones anónimas
            f = str2func(['@(x) ' f_str]);
            df = str2func(['@(x) ' df_str]);
            
            % Guardar funciones para graficar
            funcion_actual = f;
            derivada_actual = df;
            
            % Verificar que las funciones se pueden evaluar
            try
                test_f = f(x0);
                test_df = df(x0);
                if ~isfinite(test_f) || ~isfinite(test_df)
                    error('La función o su derivada no se pueden evaluar en x₀.');
                end
            catch
                error('Error al evaluar las funciones. Verifique la sintaxis.');
            end
            
            % Ejecutar algoritmo de Newton-Raphson
            [raiz, iteraciones, convergencia, historia] = newton_raphson_algoritmo(f, df, x0, tol, max_iter);
            
            % Guardar resultados
            raiz_encontrada = raiz;
            historia_iteraciones = historia;
            
            % Actualizar tabla
            datos_tabla = {};
            for i = 1:size(historia, 1)
                if i == 1
                    datos_tabla{i, 1} = 0; % Iteración inicial
                    datos_tabla{i, 2} = sprintf('%.10f', historia(i, 1)); % x_n
                    datos_tabla{i, 3} = sprintf('%.2e', historia(i, 2)); % f(x_n)
                    try
                        df_val = df(historia(i, 1));
                        datos_tabla{i, 4} = sprintf('%.2e', df_val); % f'(x_n)
                    catch
                        datos_tabla{i, 4} = 'N/A';
                    end
                    datos_tabla{i, 5} = '-'; % Error
                    datos_tabla{i, 6} = '-'; % x_{n+1}
                else
                    datos_tabla{i, 1} = i - 1;
                    datos_tabla{i, 2} = sprintf('%.10f', historia(i-1, 1));
                    datos_tabla{i, 3} = sprintf('%.2e', historia(i-1, 2));
                    try
                        df_val = df(historia(i-1, 1));
                        datos_tabla{i, 4} = sprintf('%.2e', df_val);
                    catch
                        datos_tabla{i, 4} = 'N/A';
                    end
                    datos_tabla{i, 5} = sprintf('%.2e', historia(i, 3));
                    datos_tabla{i, 6} = sprintf('%.10f', historia(i, 1));
                end
            end
            
            tabla_iteraciones.Data = datos_tabla;
            
            % Generar resultados detallados
            if convergencia
                estado = '✓ CONVERGENCIA EXITOSA';
                mensaje_conv = 'El método convergió dentro de la tolerancia especificada.';
                icono_resultado = '🎯';
            else
                estado = '⚠️ MÁXIMO DE ITERACIONES ALCANZADO';
                mensaje_conv = 'Se alcanzó el máximo de iteraciones sin convergencia completa.';
                icono_resultado = '⚠️';
            end
            
            % Calcular tasa de convergencia (aproximada)
            if size(historia, 1) > 3
                errores = historia(2:end, 3);
                errores_validos = errores(errores > 0);
                if length(errores_validos) >= 3
                    ratios = errores_validos(2:end) ./ errores_validos(1:end-1).^2;
                    tasa_conv = mean(ratios(isfinite(ratios)));
                    if isfinite(tasa_conv)
                        info_convergencia = sprintf('Tasa de convergencia cuadrática: %.2f', tasa_conv);
                    else
                        info_convergencia = 'Convergencia cuadrática verificada';
                    end
                else
                    info_convergencia = 'Convergencia rápida observada';
                end
            else
                info_convergencia = 'Pocas iteraciones para análisis';
            end
            
            texto_final = {['=== ' estado ' ==='], ...
                          '', ...
                          mensaje_conv, ...
                          '', ...
                          [icono_resultado ' RESULTADOS FINALES:'], ...
                          ['• Función: f(x) = ' f_str], ...
                          ['• Derivada: f''(x) = ' df_str], ...
                          ['• Valor inicial: x₀ = ' num2str(x0)], ...
                          ['• Raíz encontrada: x = ' sprintf('%.12f', raiz)], ...
                          ['• Valor de f(x): ' sprintf('%.2e', f(raiz))], ...
                          ['• Error final: ' sprintf('%.2e', historia(end, 3))], ...
                          ['• Iteraciones: ' num2str(iteraciones)], ...
                          '', ...
                          '📊 ANÁLISIS DE CONVERGENCIA:', ...
                          ['• Tolerancia objetivo: ' sprintf('%.1e', tol)], ...
                          ['• ' info_convergencia], ...
                          ['• Eficiencia: ' num2str(iteraciones) ' iteraciones para precisión ' sprintf('%.1e', tol)], ...
                          '', ...
                          '🔍 VERIFICACIÓN:', ...
                          ['• f(' sprintf('%.8f', raiz) ') = ' sprintf('%.2e', f(raiz))]};
            
            if abs(f(raiz)) < tol * 10
                texto_final{end+1} = '✓ Raíz verificada correctamente';
            else
                texto_final{end+1} = '⚠️ Verificar precisión de la raíz';
            end
            
            texto_final{end+1} = '';
            texto_final{end+1} = 'La gráfica muestra la función y el proceso de convergencia.';
            
            texto_resultados.Value = texto_final;
            
            % Graficar automáticamente
            graficar_funcion();
            
        catch e
            texto_resultados.Value = {'=== ERROR EN EL CÁLCULO ===', ...
                                     '', ...
                                     ['❌ ' e.message], ...
                                     '', ...
                                     'POSIBLES CAUSAS Y SOLUCIONES:', ...
                                     '', ...
                                     '🔧 Problemas comunes:', ...
                                     '• Sintaxis incorrecta en funciones', ...
                                     '  → Use sintaxis MATLAB: x^2, sin(x), exp(x), etc.', ...
                                     '', ...
                                     '• Valor inicial inadecuado', ...
                                     '  → Elija x₀ más cercano a la raíz esperada', ...
                                     '  → Evite puntos donde f''(x) = 0', ...
                                     '', ...
                                     '• Derivada incorrecta', ...
                                     '  → Verifique el cálculo manual de f''(x)', ...
                                     '  → Use "Calcular f''(x)" para derivada automática', ...
                                     '', ...
                                     '• Función problemática', ...
                                     '  → Evite funciones con derivadas que se anulan', ...
                                     '  → Considere usar otros métodos para funciones complejas'};
        end
    end
    
    % Función del algoritmo de Newton-Raphson
    function [raiz, iteraciones, convergencia, historia] = newton_raphson_algoritmo(f, df, x0, tol, max_iter)
        % Inicializar variables
        x_actual = x0;
        convergencia = false;
        historia = zeros(max_iter + 1, 3); % [x_i, f(x_i), error]
        historia(1, 1:2) = [x_actual, f(x_actual)];
        
        % Iterar
        for i = 1:max_iter
            % Calcular valores de función y derivada
            f_valor = f(x_actual);
            df_valor = df(x_actual);
            
            % Verificar si la derivada es muy pequeña
            if abs(df_valor) < eps * 1000
                warning('La derivada es muy pequeña. El método puede no converger.');
                break;
            end
            
            % Calcular nueva aproximación
            x_nuevo = x_actual - f_valor / df_valor;
            
            % Calcular error
            if abs(x_nuevo) > eps
                error_rel = abs((x_nuevo - x_actual) / x_nuevo);
            else
                error_rel = abs(x_nuevo - x_actual);
            end
            
            % Guardar en historia
            historia(i + 1, 1:3) = [x_nuevo, f(x_nuevo), error_rel];
            
            % Actualizar punto actual
            x_actual = x_nuevo;
            
            % Verificar convergencia
            if error_rel < tol || abs(f_valor) < tol
                convergencia = true;
                iteraciones = i;
                break;
            end
        end
        
        if ~convergencia
            iteraciones = max_iter;
        end
        
        % Ajustar tamaño de historia
        historia = historia(1:iteraciones + 1, :);
        raiz = x_actual;
    end
    
    % Función para graficar
    function graficar_funcion(~, ~)
        if isempty(funcion_actual)
            return;
        end
        
        try
            % Determinar rango de graficación
            if ~isempty(raiz_encontrada)
                x_center = raiz_encontrada;
            else
                x_center = campo_x0.Value;
            end
            
            x_range = [x_center - 3, x_center + 3];
            x_vals = linspace(x_range(1), x_range(2), 500);
            
            % Evaluar función
            y_vals = arrayfun(funcion_actual, x_vals);
            
            % Graficar función
            plot(axes_grafica, x_vals, y_vals, 'b-', 'LineWidth', 2);
            hold(axes_grafica, 'on');
            
            % Línea y = 0
            plot(axes_grafica, x_range, [0, 0], 'k--', 'LineWidth', 1);
            
            % Marcar punto inicial
            x0_val = campo_x0.Value;
            try
                plot(axes_grafica, x0_val, funcion_actual(x0_val), 'go', 'MarkerSize', 10, 'LineWidth', 2);
            catch
            end
            
            % Marcar raíz encontrada
            if ~isempty(raiz_encontrada)
                try
                    plot(axes_grafica, raiz_encontrada, funcion_actual(raiz_encontrada), 'ro', 'MarkerSize', 12, 'LineWidth', 3);
                    
                    % Etiqueta de la raíz
                    text(axes_grafica, raiz_encontrada, funcion_actual(raiz_encontrada) + (max(y_vals) - min(y_vals)) * 0.1, ...
                         sprintf('Raíz: %.6f', raiz_encontrada), ...
                         'FontSize', 10, 'FontWeight', 'bold', ...
                         'HorizontalAlignment', 'center', ...
                         'BackgroundColor', 'white', ...
                         'EdgeColor', 'red');
                catch
                end
            end
            
            % Mostrar proceso de convergencia
            if ~isempty(historia_iteraciones) && size(historia_iteraciones, 1) > 1
                x_iter = historia_iteraciones(:, 1);
                for i = 1:min(length(x_iter)-1, 5) % Mostrar máximo 5 iteraciones
                    try
                        y_iter = funcion_actual(x_iter(i));
                        plot(axes_grafica, x_iter(i), y_iter, 'mo', 'MarkerSize', 6);
                        
                        % Línea tangente (aproximación visual)
                        if ~isempty(derivada_actual)
                            slope = derivada_actual(x_iter(i));
                            if isfinite(slope)
                                x_tangent = [x_iter(i) - 0.5, x_iter(i) + 0.5];
                                y_tangent = y_iter + slope * (x_tangent - x_iter(i));
                                plot(axes_grafica, x_tangent, y_tangent, 'm--', 'LineWidth', 1);
                            end
                        end
                    catch
                        continue;
                    end
                end
            end
            
            grid(axes_grafica, 'on');
            title(axes_grafica, 'Método de Newton-Raphson: Función y Convergencia', 'FontSize', 12);
            xlabel(axes_grafica, 'x');
            ylabel(axes_grafica, 'f(x)');
            
            % Leyenda
            legend_items = {'f(x)', 'y = 0', 'Punto inicial x₀'};
            if ~isempty(raiz_encontrada)
                legend_items{end+1} = 'Raíz encontrada';
            end
            if ~isempty(historia_iteraciones) && size(historia_iteraciones, 1) > 1
                legend_items{end+1} = 'Iteraciones';
                legend_items{end+1} = 'Líneas tangentes';
            end
            
            legend(axes_grafica, legend_items, 'Location', 'best');
            hold(axes_grafica, 'off');
            
        catch
            text(axes_grafica, 0.5, 0.5, 'Error al generar gráfica', ...
                 'Units', 'normalized', ...
                 'HorizontalAlignment', 'center', ...
                 'FontSize', 12, 'Color', 'red');
        end
    end
    
    % Función para limpiar resultados
    function limpiar_resultados(~, ~)
        tabla_iteraciones.Data = {};
        cla(axes_grafica);
        texto_resultados.Value = {'=== RESULTADOS LIMPIADOS ===', ...
                                 '', ...
                                 'Sistema listo para nuevos cálculos.', ...
                                 '', ...
                                 'Ingrese la función f(x), su derivada f''(x),', ...
                                 'valor inicial x₀ y parámetros, luego presione "ENCONTRAR RAÍZ".', ...
                                 '', ...
                                 'Use los botones de ejemplo para cargar funciones de prueba.'};
        
        % Limpiar variables
        funcion_actual = [];
        derivada_actual = [];
        raiz_encontrada = [];
        historia_iteraciones = {};
        datos_convergencia = [];
    end
    
    % Inicializar con ejemplo 1
    cargar_ejemplo1();
end