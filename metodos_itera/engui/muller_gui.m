function muller_gui()
    % Interfaz gráfica para el Método de Müller
    
    % Crear la figura principal
    fig = uifigure('Name', 'Método de Müller', ...
                   'Position', [80, 50, 1300, 850], ...
                   'Resize', 'off', ...
                   'Color', [0.94, 0.94, 0.94]);
    
    % Título principal
    titulo = uilabel(fig, 'Text', 'MÉTODO DE MÜLLER', ...
                     'Position', [50, 790, 1200, 40], ...
                     'FontSize', 26, ...
                     'FontWeight', 'bold', ...
                     'HorizontalAlignment', 'center', ...
                     'BackgroundColor', [0.3, 0.2, 0.7], ...
                     'FontColor', 'white');
    
    % Subtítulo descriptivo
    subtitulo = uilabel(fig, 'Text', 'Método iterativo que usa interpolación cuadrática para encontrar raíces de funciones', ...
                        'Position', [50, 760, 1200, 25], ...
                        'FontSize', 13, ...
                        'HorizontalAlignment', 'center', ...
                        'FontColor', [0.3, 0.3, 0.3]);
    
    % Panel de entrada de función
    panel_funcion = uipanel(fig, 'Title', 'DEFINICIÓN DE FUNCIÓN', ...
                            'Position', [30, 630, 400, 120], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.98, 0.98, 1]);
    
    uilabel(panel_funcion, 'Text', 'Función f(x):', ...
            'Position', [15, 70, 80, 22], ...
            'FontWeight', 'bold');
    
    campo_funcion = uieditfield(panel_funcion, 'text', ...
                                'Position', [100, 70, 280, 22], ...
                                'Value', 'x.^3 - 13*x - 12', ...
                                'Placeholder', 'Ej: x.^3 - 13*x - 12');
    
    uilabel(panel_funcion, 'Text', 'Sintaxis:', ...
            'Position', [15, 40, 60, 20], ...
            'FontSize', 10, ...
            'FontColor', [0.5, 0.5, 0.5]);
    
    uilabel(panel_funcion, 'Text', 'Use .* ./ .^ para operaciones elemento a elemento', ...
            'Position', [80, 40, 300, 20], ...
            'FontSize', 9, ...
            'FontColor', [0.5, 0.5, 0.5]);
    
    uilabel(panel_funcion, 'Text', 'Ejemplos: sin(x), exp(x), log(x), x.^2 + 3*x - 5', ...
            'Position', [80, 20, 300, 20], ...
            'FontSize', 9, ...
            'FontColor', [0.5, 0.5, 0.5]);
    
    % Panel de puntos iniciales
    panel_puntos = uipanel(fig, 'Title', 'PUNTOS INICIALES', ...
                           'Position', [450, 630, 320, 120], ...
                           'FontSize', 12, ...
                           'FontWeight', 'bold', ...
                           'BackgroundColor', [0.98, 1, 0.98]);
    
    uilabel(panel_puntos, 'Text', 'x₀:', ...
            'Position', [20, 70, 30, 22], ...
            'FontWeight', 'bold');
    
    campo_x0 = uieditfield(panel_puntos, 'numeric', ...
                           'Position', [50, 70, 70, 22], ...
                           'Value', 0);
    
    uilabel(panel_puntos, 'Text', 'x₁:', ...
            'Position', [130, 70, 30, 22], ...
            'FontWeight', 'bold');
    
    campo_x1 = uieditfield(panel_puntos, 'numeric', ...
                           'Position', [160, 70, 70, 22], ...
                           'Value', 1);
    
    uilabel(panel_puntos, 'Text', 'x₂:', ...
            'Position', [240, 70, 30, 22], ...
            'FontWeight', 'bold');
    
    campo_x2 = uieditfield(panel_puntos, 'numeric', ...
                           'Position', [270, 70, 70, 22], ...
                           'Value', 2);
    
    % Información sobre puntos iniciales
    uilabel(panel_puntos, 'Text', 'Nota: Los tres puntos deben ser distintos entre sí', ...
            'Position', [20, 40, 280, 20], ...
            'FontSize', 9, ...
            'FontColor', [0.6, 0.4, 0.2]);
    
    uilabel(panel_puntos, 'Text', 'Se recomienda que estén cerca de la raíz buscada', ...
            'Position', [20, 25, 280, 20], ...
            'FontSize', 9, ...
            'FontColor', [0.6, 0.4, 0.2]);
    
    % Panel de parámetros
    panel_parametros = uipanel(fig, 'Title', 'PARÁMETROS DE CONVERGENCIA', ...
                               'Position', [790, 630, 250, 120], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [1, 0.98, 0.98]);
    
    uilabel(panel_parametros, 'Text', 'Tolerancia:', ...
            'Position', [15, 70, 80, 22], ...
            'FontWeight', 'bold');
    
    campo_tol = uieditfield(panel_parametros, 'numeric', ...
                            'Position', [100, 70, 120, 22], ...
                            'Value', 1e-6, ...
                            'ValueDisplayFormat', '%.1e');
    
    uilabel(panel_parametros, 'Text', 'Max. iter:', ...
            'Position', [15, 40, 80, 22], ...
            'FontWeight', 'bold');
    
    campo_max_iter = uieditfield(panel_parametros, 'numeric', ...
                                 'Position', [100, 40, 120, 22], ...
                                 'Value', 100);
    
    % Panel de control
    panel_control = uipanel(fig, 'Title', 'CONTROLES', ...
                            'Position', [1060, 630, 210, 120], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.98, 0.98, 0.98]);
    
    % Botones de control
    btn_calcular = uibutton(panel_control, 'Text', 'CALCULAR', ...
                            'Position', [20, 70, 170, 30], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.2, 0.7, 0.2], ...
                            'FontColor', 'white', ...
                            'ButtonPushedFcn', @calcular_muller);
    
    btn_ejemplo = uibutton(panel_control, 'Text', 'EJEMPLO', ...
                           'Position', [20, 35, 80, 25], ...
                           'FontSize', 10, ...
                           'BackgroundColor', [0.5, 0.5, 0.8], ...
                           'FontColor', 'white', ...
                           'ButtonPushedFcn', @cargar_ejemplo);
    
    btn_limpiar = uibutton(panel_control, 'Text', 'LIMPIAR', ...
                           'Position', [110, 35, 80, 25], ...
                           'FontSize', 10, ...
                           'BackgroundColor', [0.7, 0.7, 0.7], ...
                           'FontColor', 'white', ...
                           'ButtonPushedFcn', @limpiar_resultados);
    
    % Tabla de iteraciones
    panel_tabla = uipanel(fig, 'Title', 'TABLA DE ITERACIONES', ...
                          'Position', [30, 350, 620, 270], ...
                          'FontSize', 12, ...
                          'FontWeight', 'bold', ...
                          'BackgroundColor', [0.99, 0.99, 0.99]);
    
    tabla_iteraciones = uitable(panel_tabla, ...
                                'Position', [15, 15, 590, 225], ...
                                'ColumnName', {'Iteración', 'x₀', 'x₁', 'x₂', 'x₃ (nueva)', 'Error', 'f(x₃)'}, ...
                                'ColumnWidth', {70, 80, 80, 80, 100, 90, 90}, ...
                                'RowName', {}, ...
                                'Data', {});
    
    % Panel de gráfica
    panel_grafica = uipanel(fig, 'Title', 'GRÁFICA DE LA FUNCIÓN', ...
                            'Position', [670, 350, 600, 270], ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'BackgroundColor', [0.99, 0.99, 0.99]);
    
    axes_grafica = uiaxes(panel_grafica, ...
                          'Position', [20, 20, 560, 220]);
    
    % Panel de resultados
    panel_resultados = uipanel(fig, 'Title', 'RESULTADOS Y ANÁLISIS', ...
                               'Position', [30, 50, 1240, 290], ...
                               'FontSize', 12, ...
                               'FontWeight', 'bold', ...
                               'BackgroundColor', [0.98, 0.98, 0.98]);
    
    texto_resultados = uitextarea(panel_resultados, ...
                                  'Position', [20, 20, 1200, 240], ...
                                  'Editable', 'off', ...
                                  'FontSize', 11, ...
                                  'Value', {'=== MÉTODO DE MÜLLER ===', ...
                                           '', ...
                                           'El Método de Müller es un algoritmo de búsqueda de raíces que utiliza', ...
                                           'interpolación cuadrática con tres puntos para aproximar la función.', ...
                                           '', ...
                                           'CARACTERÍSTICAS:', ...
                                           '• Convergencia cuadrática (más rápida que bisección y regla falsa)', ...
                                           '• Puede encontrar raíces complejas', ...
                                           '• Requiere tres puntos iniciales distintos', ...
                                           '• No necesita que la función cambie de signo', ...
                                           '', ...
                                           'PROCEDIMIENTO:', ...
                                           '1. Ingrese la función usando sintaxis de MATLAB (ej: x.^3 - 13*x - 12)', ...
                                           '2. Defina tres puntos iniciales diferentes', ...
                                           '3. Establezca tolerancia y máximo de iteraciones', ...
                                           '4. Presione "CALCULAR" para ejecutar el método', ...
                                           '', ...
                                           'Use "EJEMPLO" para cargar una función de prueba.'});
    
    % Variables para almacenar resultados
    funcion_actual = [];
    raiz_encontrada = [];
    iteraciones_data = {};
    
    % Función para cargar ejemplo
    function cargar_ejemplo(~, ~)
        campo_funcion.Value = 'x.^3 - 13*x - 12';
        campo_x0.Value = 0;
        campo_x1.Value = 1;
        campo_x2.Value = 2;
        campo_tol.Value = 1e-6;
        campo_max_iter.Value = 50;
        
        texto_resultados.Value = {'=== EJEMPLO CARGADO ===', ...
                                 '', ...
                                 'Función: f(x) = x³ - 13x - 12', ...
                                 '', ...
                                 'Esta función tiene raíces en x = -3, x = -1, y x = 4', ...
                                 'Puntos iniciales: x₀ = 0, x₁ = 1, x₂ = 2', ...
                                 'Con estos puntos, el método debería converger hacia x = 4', ...
                                 '', ...
                                 'Presione "CALCULAR" para ejecutar el Método de Müller.'};
    end
    
    % Función principal de cálculo
    function calcular_muller(~, ~)
        try
            % Limpiar resultados anteriores
            tabla_iteraciones.Data = {};
            cla(axes_grafica);
            
            % Obtener parámetros
            f_str = campo_funcion.Value;
            x0 = campo_x0.Value;
            x1 = campo_x1.Value;
            x2 = campo_x2.Value;
            tol = campo_tol.Value;
            max_iter = campo_max_iter.Value;
            
            % Validar puntos iniciales
            if x0 == x1 || x1 == x2 || x0 == x2
                error('Los tres puntos iniciales deben ser diferentes entre sí.');
            end
            
            % Crear función anónima
            f = str2func(['@(x) ' f_str]);
            funcion_actual = f;
            
            % Verificar que la función se puede evaluar
            try
                test_vals = [f(x0), f(x1), f(x2)];
                if any(~isfinite(test_vals))
                    error('La función no se puede evaluar en uno o más puntos iniciales.');
                end
            catch
                error('Error al evaluar la función. Verifique la sintaxis.');
            end
            
            % Inicialización
            iter = 0;
            error_actual = Inf;
            datos_tabla = {};
            
            texto_resultados.Value = {'=== EJECUTANDO MÉTODO DE MÜLLER ===', ...
                                     '', ...
                                     ['Función: f(x) = ' f_str], ...
                                     ['Puntos iniciales: x₀ = ' num2str(x0) ', x₁ = ' num2str(x1) ', x₂ = ' num2str(x2)], ...
                                     ['Tolerancia: ' num2str(tol)], ...
                                     '', ...
                                     'Calculando iteraciones...'};
            drawnow;
            
            % Algoritmo de Müller
            while error_actual > tol && iter < max_iter
                % Calcular diferencias divididas
                h1 = x1 - x0;
                h2 = x2 - x1;
                d1 = (f(x1) - f(x0)) / h1;
                d2 = (f(x2) - f(x1)) / h2;
                
                % Coeficientes de la parábola
                a = (d2 - d1) / (h2 + h1);
                b = a * h2 + d2;
                c = f(x2);
                
                % Calcular discriminante
                discriminante = b^2 - 4 * a * c;
                rad = sqrt(discriminante);
                
                % Seleccionar denominador para minimizar error de cancelación
                if abs(b + rad) > abs(b - rad)
                    den = b + rad;
                else
                    den = b - rad;
                end
                
                if abs(den) < eps * 1000
                    error('División por cero detectada. El método no puede continuar.');
                end
                
                % Calcular nuevo punto
                dx = -2 * c / den;
                x3 = x2 + dx;
                error_actual = abs(dx);
                
                iter = iter + 1;
                
                % Guardar datos para la tabla
                datos_tabla{end+1, 1} = iter;
                datos_tabla{end, 2} = sprintf('%.6f', x0);
                datos_tabla{end, 3} = sprintf('%.6f', x1);
                datos_tabla{end, 4} = sprintf('%.6f', x2);
                datos_tabla{end, 5} = sprintf('%.8f', real(x3));
                datos_tabla{end, 6} = sprintf('%.2e', error_actual);
                
                try
                    fx3 = f(real(x3));
                    datos_tabla{end, 7} = sprintf('%.2e', abs(fx3));
                catch
                    datos_tabla{end, 7} = 'N/A';
                end
                
                % Actualizar puntos para siguiente iteración
                x0 = x1;
                x1 = x2;
                x2 = x3;
            end
            
            % Guardar raíz encontrada
            raiz_encontrada = real(x2);
            
            % Actualizar tabla
            tabla_iteraciones.Data = datos_tabla;
            
            % Generar resultados finales
            if error_actual <= tol
                estado = '✓ CONVERGENCIA EXITOSA';
                mensaje_convergencia = 'El método convergió dentro de la tolerancia especificada.';
            else
                estado = '⚠️ MÁXIMO DE ITERACIONES ALCANZADO';
                mensaje_convergencia = 'Se alcanzó el máximo de iteraciones sin convergencia completa.';
            end
            
            try
                valor_funcion = f(raiz_encontrada);
                texto_final = sprintf('f(%.8f) = %.2e', raiz_encontrada, valor_funcion);
            catch
                texto_final = 'Error al evaluar f(x) en la raíz';
            end
            
            texto_resultados.Value = {['=== ' estado ' ==='], ...
                                     '', ...
                                     mensaje_convergencia, ...
                                     '', ...
                                     '📊 RESULTADOS FINALES:', ...
                                     ['• Raíz aproximada: x = ' sprintf('%.10f', raiz_encontrada)], ...
                                     ['• Valor de la función: ' texto_final], ...
                                     ['• Error final: ' sprintf('%.2e', error_actual)], ...
                                     ['• Iteraciones realizadas: ' num2str(iter)], ...
                                     '', ...
                                     '📈 ANÁLISIS DE CONVERGENCIA:', ...
                                     ['• Tolerancia objetivo: ' sprintf('%.1e', tol)], ...
                                     ['• Velocidad: ' num2str(iter) ' iteraciones'], ...
                                     '', ...
                                     'La gráfica muestra la función y la raíz encontrada.'};
            
            % Graficar automáticamente
            graficar_funcion();
            
        catch e
            texto_resultados.Value = {'=== ERROR EN EL CÁLCULO ===', ...
                                     '', ...
                                     ['❌ ' e.message], ...
                                     '', ...
                                     'POSIBLES CAUSAS Y SOLUCIONES:', ...
                                     '', ...
                                     '🔧 Errores comunes:', ...
                                     '• Sintaxis incorrecta en la función', ...
                                     '  → Use .* ./ .^ para operaciones elemento a elemento', ...
                                     '  → Ejemplo: x.^2 + sin(x) - 3', ...
                                     '', ...
                                     '• Puntos iniciales iguales', ...
                                     '  → Los tres puntos x₀, x₁, x₂ deben ser diferentes', ...
                                     '', ...
                                     '• Función no evaluable en puntos iniciales', ...
                                     '  → Evite divisiones por cero o logaritmos de números negativos', ...
                                     '', ...
                                     '• División por cero durante iteraciones', ...
                                     '  → Intente con puntos iniciales diferentes'};
        end
    end
    
    % Función para graficar
    function graficar_funcion(~, ~)
        if isempty(funcion_actual)
            return;
        end
        
        try
            % Determinar rango de graficación
            if ~isempty(raiz_encontrada)
                x_center = raiz_encontrada;
            else
                x_center = (campo_x0.Value + campo_x1.Value + campo_x2.Value) / 3;
            end
            
            x_range = [x_center - 5, x_center + 5];
            x_vals = linspace(x_range(1), x_range(2), 500);
            
            % Evaluar función
            try
                y_vals = arrayfun(funcion_actual, x_vals);
            catch
                % Si hay problemas con arrayfun, usar un loop
                y_vals = zeros(size(x_vals));
                for i = 1:length(x_vals)
                    try
                        y_vals(i) = funcion_actual(x_vals(i));
                    catch
                        y_vals(i) = NaN;
                    end
                end
            end
            
            % Graficar función
            plot(axes_grafica, x_vals, y_vals, 'b-', 'LineWidth', 2);
            hold(axes_grafica, 'on');
            
            % Línea en y = 0
            plot(axes_grafica, x_range, [0, 0], 'k--', 'LineWidth', 1);
            
            % Marcar puntos iniciales
            x0_val = campo_x0.Value;
            x1_val = campo_x1.Value;
            x2_val = campo_x2.Value;
            
            try
                plot(axes_grafica, x0_val, funcion_actual(x0_val), 'go', 'MarkerSize', 8, 'LineWidth', 2);
                plot(axes_grafica, x1_val, funcion_actual(x1_val), 'go', 'MarkerSize', 8, 'LineWidth', 2);
                plot(axes_grafica, x2_val, funcion_actual(x2_val), 'go', 'MarkerSize', 8, 'LineWidth', 2);
            catch
                % Continuar si no se pueden evaluar los puntos iniciales
            end
            
            % Marcar raíz encontrada
            if ~isempty(raiz_encontrada)
                try
                    y_raiz = funcion_actual(raiz_encontrada);
                    plot(axes_grafica, raiz_encontrada, y_raiz, 'ro', 'MarkerSize', 12, 'LineWidth', 3);
                    
                    % Etiqueta de la raíz
                    text(axes_grafica, raiz_encontrada, y_raiz + (max(y_vals) - min(y_vals)) * 0.1, ...
                         sprintf('Raíz: %.4f', raiz_encontrada), ...
                         'FontSize', 10, 'FontWeight', 'bold', ...
                         'HorizontalAlignment', 'center', ...
                         'BackgroundColor', 'white', ...
                         'EdgeColor', 'red');
                catch
                    % Continuar si no se puede evaluar en la raíz
                end
            end
            
            grid(axes_grafica, 'on');
            title(axes_grafica, 'Método de Müller - Función y Raíz Aproximada', 'FontSize', 12);
            xlabel(axes_grafica, 'x');
            ylabel(axes_grafica, 'f(x)');
            
            if ~isempty(raiz_encontrada)
                legend(axes_grafica, {'f(x)', 'y = 0', 'Puntos iniciales', '', '', 'Raíz encontrada'}, ...
                       'Location', 'best');
            else
                legend(axes_grafica, {'f(x)', 'y = 0', 'Puntos iniciales'}, ...
                       'Location', 'best');
            end
            
            hold(axes_grafica, 'off');
            
        catch
            text(axes_grafica, 0.5, 0.5, 'Error al generar gráfica', ...
                 'Units', 'normalized', ...
                 'HorizontalAlignment', 'center', ...
                 'FontSize', 12, 'Color', 'red');
        end
    end
    
    % Función para limpiar resultados
    function limpiar_resultados(~, ~)
        tabla_iteraciones.Data = {};
        cla(axes_grafica);
        texto_resultados.Value = {'=== RESULTADOS LIMPIADOS ===', ...
                                 '', ...
                                 'Sistema listo para nuevos cálculos.', ...
                                 '', ...
                                 'Ingrese la función y parámetros, luego presione "CALCULAR".'};
        raiz_encontrada = [];
        funcion_actual = [];
        iteraciones_data = {};
    end
    
    % Inicializar con ejemplo al abrir
    cargar_ejemplo();
end